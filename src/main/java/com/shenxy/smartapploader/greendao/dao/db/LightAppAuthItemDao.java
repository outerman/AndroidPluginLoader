package com.shenxy.smartapploader.greendao.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shenxy.smartapploader.greendao.dao.LightAppAuth.LightAppAuthItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LightAppAuth.
*/
public class LightAppAuthItemDao extends AbstractDao<LightAppAuthItem, String> {

    public static final String TABLENAME = "LightAppAuth";

    /**
     * Properties of entity LightAppAuthItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property AppId = new Property(1, Integer.class, "appId", false, "APP_ID");
        public final static Property PluginName = new Property(2, String.class, "pluginName", false, "PLUGIN_NAME");
        public final static Property PluginMethod = new Property(3, String.class, "pluginMethod", false, "PLUGIN_METHOD");
        public final static Property AuthValue = new Property(4, Integer.class, "authValue", false, "AUTH_VALUE");
    };


    public LightAppAuthItemDao(DaoConfig config) {
        super(config);
    }
    
    public LightAppAuthItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LightAppAuth' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "'APP_ID' INTEGER," + // 1: appId
                "'PLUGIN_NAME' TEXT," + // 2: pluginName
                "'PLUGIN_METHOD' TEXT," + // 3: pluginMethod
                "'AUTH_VALUE' INTEGER);"); // 4: authValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LightAppAuth'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightAppAuthItem entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        Integer appId = entity.getAppId();
        if (appId != null) {
            stmt.bindLong(2, appId);
        }
 
        String pluginName = entity.getPluginName();
        if (pluginName != null) {
            stmt.bindString(3, pluginName);
        }
 
        String pluginMethod = entity.getPluginMethod();
        if (pluginMethod != null) {
            stmt.bindString(4, pluginMethod);
        }
 
        Integer authValue = entity.getAuthValue();
        if (authValue != null) {
            stmt.bindLong(5, authValue);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LightAppAuthItem readEntity(Cursor cursor, int offset) {
        LightAppAuthItem entity = new LightAppAuthItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // appId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pluginName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pluginMethod
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // authValue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LightAppAuthItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAppId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPluginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPluginMethod(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthValue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LightAppAuthItem entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LightAppAuthItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
